# serializer version: 1
# name: test_entity_state_attrs[sensor.i3_rex_ac_current_limit-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.i3_rex_ac_current_limit',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 0,
      }),
    }),
    'original_device_class': <SensorDeviceClass.CURRENT: 'current'>,
    'original_icon': None,
    'original_name': 'AC current limit',
    'platform': 'bmw_connected_drive',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'ac_current_limit',
    'unique_id': 'WBY00000000REXI01-ac_current_limit',
    'unit_of_measurement': <UnitOfElectricCurrent.AMPERE: 'A'>,
  })
# ---
# name: test_entity_state_attrs[sensor.i3_rex_ac_current_limit-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by MyBMW',
      'device_class': 'current',
      'friendly_name': 'i3 (+ REX) AC current limit',
      'unit_of_measurement': <UnitOfElectricCurrent.AMPERE: 'A'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.i3_rex_ac_current_limit',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_entity_state_attrs[sensor.i3_rex_charging_end_time-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.i3_rex_charging_end_time',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.TIMESTAMP: 'timestamp'>,
    'original_icon': None,
    'original_name': 'Charging end time',
    'platform': 'bmw_connected_drive',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charging_end_time',
    'unique_id': 'WBY00000000REXI01-charging_end_time',
    'unit_of_measurement': None,
  })
# ---
# name: test_entity_state_attrs[sensor.i3_rex_charging_end_time-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by MyBMW',
      'device_class': 'timestamp',
      'friendly_name': 'i3 (+ REX) Charging end time',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.i3_rex_charging_end_time',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_entity_state_attrs[sensor.i3_rex_charging_start_time-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.i3_rex_charging_start_time',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.TIMESTAMP: 'timestamp'>,
    'original_icon': None,
    'original_name': 'Charging start time',
    'platform': 'bmw_connected_drive',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charging_start_time',
    'unique_id': 'WBY00000000REXI01-charging_start_time',
    'unit_of_measurement': None,
  })
# ---
# name: test_entity_state_attrs[sensor.i3_rex_charging_start_time-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by MyBMW',
      'device_class': 'timestamp',
      'friendly_name': 'i3 (+ REX) Charging start time',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.i3_rex_charging_start_time',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2023-06-23T01:01:00+00:00',
  })
# ---
# name: test_entity_state_attrs[sensor.i3_rex_charging_status-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'default',
        'charging',
        'error',
        'complete',
        'fully_charged',
        'finished_fully_charged',
        'finished_not_full',
        'invalid',
        'not_charging',
        'plugged_in',
        'waiting_for_charging',
        'target_reached',
      ]),
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.i3_rex_charging_status',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': None,
    'original_name': 'Charging status',
    'platform': 'bmw_connected_drive',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charging_status',
    'unique_id': 'WBY00000000REXI01-charging_status',
    'unit_of_measurement': None,
  })
# ---
# name: test_entity_state_attrs[sensor.i3_rex_charging_status-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by MyBMW',
      'device_class': 'enum',
      'friendly_name': 'i3 (+ REX) Charging status',
      'options': list([
        'default',
        'charging',
        'error',
        'complete',
        'fully_charged',
        'finished_fully_charged',
        'finished_not_full',
        'invalid',
        'not_charging',
        'plugged_in',
        'waiting_for_charging',
        'target_reached',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.i3_rex_charging_status',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'waiting_for_charging',
  })
# ---
# name: test_entity_state_attrs[sensor.i3_rex_charging_target-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.i3_rex_charging_target',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 0,
      }),
    }),
    'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
    'original_icon': None,
    'original_name': 'Charging target',
    'platform': 'bmw_connected_drive',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charging_target',
    'unique_id': 'WBY00000000REXI01-charging_target',
    'unit_of_measurement': '%',
  })
# ---
# name: test_entity_state_attrs[sensor.i3_rex_charging_target-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by MyBMW',
      'device_class': 'battery',
      'friendly_name': 'i3 (+ REX) Charging target',
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.i3_rex_charging_target',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '100',
  })
# ---
# name: test_entity_state_attrs[sensor.i3_rex_mileage-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.i3_rex_mileage',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 0,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
    'original_icon': None,
    'original_name': 'Mileage',
    'platform': 'bmw_connected_drive',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'mileage',
    'unique_id': 'WBY00000000REXI01-mileage',
    'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
  })
# ---
# name: test_entity_state_attrs[sensor.i3_rex_mileage-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by MyBMW',
      'device_class': 'distance',
      'friendly_name': 'i3 (+ REX) Mileage',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.i3_rex_mileage',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '137009',
  })
# ---
# name: test_entity_state_attrs[sensor.i3_rex_remaining_battery_percent-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.i3_rex_remaining_battery_percent',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 0,
      }),
    }),
    'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
    'original_icon': None,
    'original_name': 'Remaining battery percent',
    'platform': 'bmw_connected_drive',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'remaining_battery_percent',
    'unique_id': 'WBY00000000REXI01-remaining_battery_percent',
    'unit_of_measurement': '%',
  })
# ---
# name: test_entity_state_attrs[sensor.i3_rex_remaining_battery_percent-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by MyBMW',
      'device_class': 'battery',
      'friendly_name': 'i3 (+ REX) Remaining battery percent',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.i3_rex_remaining_battery_percent',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '82',
  })
# ---
# name: test_entity_state_attrs[sensor.i3_rex_remaining_fuel-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.i3_rex_remaining_fuel',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 0,
      }),
    }),
    'original_device_class': <SensorDeviceClass.VOLUME: 'volume'>,
    'original_icon': None,
    'original_name': 'Remaining fuel',
    'platform': 'bmw_connected_drive',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'remaining_fuel',
    'unique_id': 'WBY00000000REXI01-remaining_fuel',
    'unit_of_measurement': <UnitOfVolume.LITERS: 'L'>,
  })
# ---
# name: test_entity_state_attrs[sensor.i3_rex_remaining_fuel-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by MyBMW',
      'device_class': 'volume',
      'friendly_name': 'i3 (+ REX) Remaining fuel',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfVolume.LITERS: 'L'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.i3_rex_remaining_fuel',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '6',
  })
# ---
# name: test_entity_state_attrs[sensor.i3_rex_remaining_fuel_percent-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.i3_rex_remaining_fuel_percent',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 0,
      }),
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Remaining fuel percent',
    'platform': 'bmw_connected_drive',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'remaining_fuel_percent',
    'unique_id': 'WBY00000000REXI01-remaining_fuel_percent',
    'unit_of_measurement': '%',
  })
# ---
# name: test_entity_state_attrs[sensor.i3_rex_remaining_fuel_percent-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by MyBMW',
      'friendly_name': 'i3 (+ REX) Remaining fuel percent',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.i3_rex_remaining_fuel_percent',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_entity_state_attrs[sensor.i3_rex_remaining_range_electric-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.i3_rex_remaining_range_electric',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 0,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
    'original_icon': None,
    'original_name': 'Remaining range electric',
    'platform': 'bmw_connected_drive',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'remaining_range_electric',
    'unique_id': 'WBY00000000REXI01-remaining_range_electric',
    'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
  })
# ---
# name: test_entity_state_attrs[sensor.i3_rex_remaining_range_electric-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by MyBMW',
      'device_class': 'distance',
      'friendly_name': 'i3 (+ REX) Remaining range electric',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.i3_rex_remaining_range_electric',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '174',
  })
# ---
# name: test_entity_state_attrs[sensor.i3_rex_remaining_range_fuel-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.i3_rex_remaining_range_fuel',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 0,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
    'original_icon': None,
    'original_name': 'Remaining range fuel',
    'platform': 'bmw_connected_drive',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'remaining_range_fuel',
    'unique_id': 'WBY00000000REXI01-remaining_range_fuel',
    'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
  })
# ---
# name: test_entity_state_attrs[sensor.i3_rex_remaining_range_fuel-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by MyBMW',
      'device_class': 'distance',
      'friendly_name': 'i3 (+ REX) Remaining range fuel',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.i3_rex_remaining_range_fuel',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '105',
  })
# ---
# name: test_entity_state_attrs[sensor.i3_rex_remaining_range_total-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.i3_rex_remaining_range_total',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 0,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
    'original_icon': None,
    'original_name': 'Remaining range total',
    'platform': 'bmw_connected_drive',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'remaining_range_total',
    'unique_id': 'WBY00000000REXI01-remaining_range_total',
    'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
  })
# ---
# name: test_entity_state_attrs[sensor.i3_rex_remaining_range_total-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by MyBMW',
      'device_class': 'distance',
      'friendly_name': 'i3 (+ REX) Remaining range total',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.i3_rex_remaining_range_total',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '279',
  })
# ---
# name: test_entity_state_attrs[sensor.i4_edrive40_ac_current_limit-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.i4_edrive40_ac_current_limit',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 0,
      }),
    }),
    'original_device_class': <SensorDeviceClass.CURRENT: 'current'>,
    'original_icon': None,
    'original_name': 'AC current limit',
    'platform': 'bmw_connected_drive',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'ac_current_limit',
    'unique_id': 'WBA00000000DEMO02-ac_current_limit',
    'unit_of_measurement': <UnitOfElectricCurrent.AMPERE: 'A'>,
  })
# ---
# name: test_entity_state_attrs[sensor.i4_edrive40_ac_current_limit-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by MyBMW',
      'device_class': 'current',
      'friendly_name': 'i4 eDrive40 AC current limit',
      'unit_of_measurement': <UnitOfElectricCurrent.AMPERE: 'A'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.i4_edrive40_ac_current_limit',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '16',
  })
# ---
# name: test_entity_state_attrs[sensor.i4_edrive40_charging_end_time-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.i4_edrive40_charging_end_time',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.TIMESTAMP: 'timestamp'>,
    'original_icon': None,
    'original_name': 'Charging end time',
    'platform': 'bmw_connected_drive',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charging_end_time',
    'unique_id': 'WBA00000000DEMO02-charging_end_time',
    'unit_of_measurement': None,
  })
# ---
# name: test_entity_state_attrs[sensor.i4_edrive40_charging_end_time-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by MyBMW',
      'device_class': 'timestamp',
      'friendly_name': 'i4 eDrive40 Charging end time',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.i4_edrive40_charging_end_time',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2023-06-22T10:40:00+00:00',
  })
# ---
# name: test_entity_state_attrs[sensor.i4_edrive40_charging_start_time-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.i4_edrive40_charging_start_time',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.TIMESTAMP: 'timestamp'>,
    'original_icon': None,
    'original_name': 'Charging start time',
    'platform': 'bmw_connected_drive',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charging_start_time',
    'unique_id': 'WBA00000000DEMO02-charging_start_time',
    'unit_of_measurement': None,
  })
# ---
# name: test_entity_state_attrs[sensor.i4_edrive40_charging_start_time-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by MyBMW',
      'device_class': 'timestamp',
      'friendly_name': 'i4 eDrive40 Charging start time',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.i4_edrive40_charging_start_time',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_entity_state_attrs[sensor.i4_edrive40_charging_status-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'default',
        'charging',
        'error',
        'complete',
        'fully_charged',
        'finished_fully_charged',
        'finished_not_full',
        'invalid',
        'not_charging',
        'plugged_in',
        'waiting_for_charging',
        'target_reached',
      ]),
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.i4_edrive40_charging_status',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': None,
    'original_name': 'Charging status',
    'platform': 'bmw_connected_drive',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charging_status',
    'unique_id': 'WBA00000000DEMO02-charging_status',
    'unit_of_measurement': None,
  })
# ---
# name: test_entity_state_attrs[sensor.i4_edrive40_charging_status-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by MyBMW',
      'device_class': 'enum',
      'friendly_name': 'i4 eDrive40 Charging status',
      'options': list([
        'default',
        'charging',
        'error',
        'complete',
        'fully_charged',
        'finished_fully_charged',
        'finished_not_full',
        'invalid',
        'not_charging',
        'plugged_in',
        'waiting_for_charging',
        'target_reached',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.i4_edrive40_charging_status',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'not_charging',
  })
# ---
# name: test_entity_state_attrs[sensor.i4_edrive40_charging_target-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.i4_edrive40_charging_target',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 0,
      }),
    }),
    'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
    'original_icon': None,
    'original_name': 'Charging target',
    'platform': 'bmw_connected_drive',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charging_target',
    'unique_id': 'WBA00000000DEMO02-charging_target',
    'unit_of_measurement': '%',
  })
# ---
# name: test_entity_state_attrs[sensor.i4_edrive40_charging_target-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by MyBMW',
      'device_class': 'battery',
      'friendly_name': 'i4 eDrive40 Charging target',
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.i4_edrive40_charging_target',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '80',
  })
# ---
# name: test_entity_state_attrs[sensor.i4_edrive40_climate_status-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'cooling',
        'heating',
        'inactive',
        'standby',
      ]),
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.i4_edrive40_climate_status',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': None,
    'original_name': 'Climate status',
    'platform': 'bmw_connected_drive',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'climate_status',
    'unique_id': 'WBA00000000DEMO02-activity',
    'unit_of_measurement': None,
  })
# ---
# name: test_entity_state_attrs[sensor.i4_edrive40_climate_status-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by MyBMW',
      'device_class': 'enum',
      'friendly_name': 'i4 eDrive40 Climate status',
      'options': list([
        'cooling',
        'heating',
        'inactive',
        'standby',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.i4_edrive40_climate_status',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'heating',
  })
# ---
# name: test_entity_state_attrs[sensor.i4_edrive40_mileage-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.i4_edrive40_mileage',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 0,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
    'original_icon': None,
    'original_name': 'Mileage',
    'platform': 'bmw_connected_drive',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'mileage',
    'unique_id': 'WBA00000000DEMO02-mileage',
    'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
  })
# ---
# name: test_entity_state_attrs[sensor.i4_edrive40_mileage-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by MyBMW',
      'device_class': 'distance',
      'friendly_name': 'i4 eDrive40 Mileage',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.i4_edrive40_mileage',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '1121',
  })
# ---
# name: test_entity_state_attrs[sensor.i4_edrive40_remaining_battery_percent-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.i4_edrive40_remaining_battery_percent',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 0,
      }),
    }),
    'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
    'original_icon': None,
    'original_name': 'Remaining battery percent',
    'platform': 'bmw_connected_drive',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'remaining_battery_percent',
    'unique_id': 'WBA00000000DEMO02-remaining_battery_percent',
    'unit_of_measurement': '%',
  })
# ---
# name: test_entity_state_attrs[sensor.i4_edrive40_remaining_battery_percent-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by MyBMW',
      'device_class': 'battery',
      'friendly_name': 'i4 eDrive40 Remaining battery percent',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.i4_edrive40_remaining_battery_percent',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '80',
  })
# ---
# name: test_entity_state_attrs[sensor.i4_edrive40_remaining_range_electric-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.i4_edrive40_remaining_range_electric',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 0,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
    'original_icon': None,
    'original_name': 'Remaining range electric',
    'platform': 'bmw_connected_drive',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'remaining_range_electric',
    'unique_id': 'WBA00000000DEMO02-remaining_range_electric',
    'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
  })
# ---
# name: test_entity_state_attrs[sensor.i4_edrive40_remaining_range_electric-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by MyBMW',
      'device_class': 'distance',
      'friendly_name': 'i4 eDrive40 Remaining range electric',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.i4_edrive40_remaining_range_electric',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '472',
  })
# ---
# name: test_entity_state_attrs[sensor.i4_edrive40_remaining_range_total-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.i4_edrive40_remaining_range_total',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 0,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
    'original_icon': None,
    'original_name': 'Remaining range total',
    'platform': 'bmw_connected_drive',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'remaining_range_total',
    'unique_id': 'WBA00000000DEMO02-remaining_range_total',
    'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
  })
# ---
# name: test_entity_state_attrs[sensor.i4_edrive40_remaining_range_total-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by MyBMW',
      'device_class': 'distance',
      'friendly_name': 'i4 eDrive40 Remaining range total',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.i4_edrive40_remaining_range_total',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '472',
  })
# ---
# name: test_entity_state_attrs[sensor.ix_xdrive50_ac_current_limit-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.ix_xdrive50_ac_current_limit',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 0,
      }),
    }),
    'original_device_class': <SensorDeviceClass.CURRENT: 'current'>,
    'original_icon': None,
    'original_name': 'AC current limit',
    'platform': 'bmw_connected_drive',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'ac_current_limit',
    'unique_id': 'WBA00000000DEMO01-ac_current_limit',
    'unit_of_measurement': <UnitOfElectricCurrent.AMPERE: 'A'>,
  })
# ---
# name: test_entity_state_attrs[sensor.ix_xdrive50_ac_current_limit-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by MyBMW',
      'device_class': 'current',
      'friendly_name': 'iX xDrive50 AC current limit',
      'unit_of_measurement': <UnitOfElectricCurrent.AMPERE: 'A'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.ix_xdrive50_ac_current_limit',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '16',
  })
# ---
# name: test_entity_state_attrs[sensor.ix_xdrive50_charging_end_time-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.ix_xdrive50_charging_end_time',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.TIMESTAMP: 'timestamp'>,
    'original_icon': None,
    'original_name': 'Charging end time',
    'platform': 'bmw_connected_drive',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charging_end_time',
    'unique_id': 'WBA00000000DEMO01-charging_end_time',
    'unit_of_measurement': None,
  })
# ---
# name: test_entity_state_attrs[sensor.ix_xdrive50_charging_end_time-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by MyBMW',
      'device_class': 'timestamp',
      'friendly_name': 'iX xDrive50 Charging end time',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.ix_xdrive50_charging_end_time',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2023-06-22T10:40:00+00:00',
  })
# ---
# name: test_entity_state_attrs[sensor.ix_xdrive50_charging_start_time-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.ix_xdrive50_charging_start_time',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.TIMESTAMP: 'timestamp'>,
    'original_icon': None,
    'original_name': 'Charging start time',
    'platform': 'bmw_connected_drive',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charging_start_time',
    'unique_id': 'WBA00000000DEMO01-charging_start_time',
    'unit_of_measurement': None,
  })
# ---
# name: test_entity_state_attrs[sensor.ix_xdrive50_charging_start_time-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by MyBMW',
      'device_class': 'timestamp',
      'friendly_name': 'iX xDrive50 Charging start time',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.ix_xdrive50_charging_start_time',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_entity_state_attrs[sensor.ix_xdrive50_charging_status-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'default',
        'charging',
        'error',
        'complete',
        'fully_charged',
        'finished_fully_charged',
        'finished_not_full',
        'invalid',
        'not_charging',
        'plugged_in',
        'waiting_for_charging',
        'target_reached',
      ]),
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.ix_xdrive50_charging_status',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': None,
    'original_name': 'Charging status',
    'platform': 'bmw_connected_drive',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charging_status',
    'unique_id': 'WBA00000000DEMO01-charging_status',
    'unit_of_measurement': None,
  })
# ---
# name: test_entity_state_attrs[sensor.ix_xdrive50_charging_status-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by MyBMW',
      'device_class': 'enum',
      'friendly_name': 'iX xDrive50 Charging status',
      'options': list([
        'default',
        'charging',
        'error',
        'complete',
        'fully_charged',
        'finished_fully_charged',
        'finished_not_full',
        'invalid',
        'not_charging',
        'plugged_in',
        'waiting_for_charging',
        'target_reached',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.ix_xdrive50_charging_status',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'charging',
  })
# ---
# name: test_entity_state_attrs[sensor.ix_xdrive50_charging_target-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.ix_xdrive50_charging_target',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 0,
      }),
    }),
    'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
    'original_icon': None,
    'original_name': 'Charging target',
    'platform': 'bmw_connected_drive',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charging_target',
    'unique_id': 'WBA00000000DEMO01-charging_target',
    'unit_of_measurement': '%',
  })
# ---
# name: test_entity_state_attrs[sensor.ix_xdrive50_charging_target-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by MyBMW',
      'device_class': 'battery',
      'friendly_name': 'iX xDrive50 Charging target',
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.ix_xdrive50_charging_target',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '80',
  })
# ---
# name: test_entity_state_attrs[sensor.ix_xdrive50_climate_status-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'cooling',
        'heating',
        'inactive',
        'standby',
      ]),
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.ix_xdrive50_climate_status',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': None,
    'original_name': 'Climate status',
    'platform': 'bmw_connected_drive',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'climate_status',
    'unique_id': 'WBA00000000DEMO01-activity',
    'unit_of_measurement': None,
  })
# ---
# name: test_entity_state_attrs[sensor.ix_xdrive50_climate_status-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by MyBMW',
      'device_class': 'enum',
      'friendly_name': 'iX xDrive50 Climate status',
      'options': list([
        'cooling',
        'heating',
        'inactive',
        'standby',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.ix_xdrive50_climate_status',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'inactive',
  })
# ---
# name: test_entity_state_attrs[sensor.ix_xdrive50_mileage-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.ix_xdrive50_mileage',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 0,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
    'original_icon': None,
    'original_name': 'Mileage',
    'platform': 'bmw_connected_drive',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'mileage',
    'unique_id': 'WBA00000000DEMO01-mileage',
    'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
  })
# ---
# name: test_entity_state_attrs[sensor.ix_xdrive50_mileage-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by MyBMW',
      'device_class': 'distance',
      'friendly_name': 'iX xDrive50 Mileage',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.ix_xdrive50_mileage',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '1121',
  })
# ---
# name: test_entity_state_attrs[sensor.ix_xdrive50_remaining_battery_percent-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.ix_xdrive50_remaining_battery_percent',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 0,
      }),
    }),
    'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
    'original_icon': None,
    'original_name': 'Remaining battery percent',
    'platform': 'bmw_connected_drive',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'remaining_battery_percent',
    'unique_id': 'WBA00000000DEMO01-remaining_battery_percent',
    'unit_of_measurement': '%',
  })
# ---
# name: test_entity_state_attrs[sensor.ix_xdrive50_remaining_battery_percent-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by MyBMW',
      'device_class': 'battery',
      'friendly_name': 'iX xDrive50 Remaining battery percent',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.ix_xdrive50_remaining_battery_percent',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '70',
  })
# ---
# name: test_entity_state_attrs[sensor.ix_xdrive50_remaining_range_electric-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.ix_xdrive50_remaining_range_electric',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 0,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
    'original_icon': None,
    'original_name': 'Remaining range electric',
    'platform': 'bmw_connected_drive',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'remaining_range_electric',
    'unique_id': 'WBA00000000DEMO01-remaining_range_electric',
    'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
  })
# ---
# name: test_entity_state_attrs[sensor.ix_xdrive50_remaining_range_electric-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by MyBMW',
      'device_class': 'distance',
      'friendly_name': 'iX xDrive50 Remaining range electric',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.ix_xdrive50_remaining_range_electric',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '340',
  })
# ---
# name: test_entity_state_attrs[sensor.ix_xdrive50_remaining_range_total-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.ix_xdrive50_remaining_range_total',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 0,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
    'original_icon': None,
    'original_name': 'Remaining range total',
    'platform': 'bmw_connected_drive',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'remaining_range_total',
    'unique_id': 'WBA00000000DEMO01-remaining_range_total',
    'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
  })
# ---
# name: test_entity_state_attrs[sensor.ix_xdrive50_remaining_range_total-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by MyBMW',
      'device_class': 'distance',
      'friendly_name': 'iX xDrive50 Remaining range total',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.ix_xdrive50_remaining_range_total',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '340',
  })
# ---
# name: test_entity_state_attrs[sensor.m340i_xdrive_climate_status-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'cooling',
        'heating',
        'inactive',
        'standby',
      ]),
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.m340i_xdrive_climate_status',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': None,
    'original_name': 'Climate status',
    'platform': 'bmw_connected_drive',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'climate_status',
    'unique_id': 'WBA00000000DEMO03-activity',
    'unit_of_measurement': None,
  })
# ---
# name: test_entity_state_attrs[sensor.m340i_xdrive_climate_status-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by MyBMW',
      'device_class': 'enum',
      'friendly_name': 'M340i xDrive Climate status',
      'options': list([
        'cooling',
        'heating',
        'inactive',
        'standby',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.m340i_xdrive_climate_status',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'inactive',
  })
# ---
# name: test_entity_state_attrs[sensor.m340i_xdrive_mileage-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.m340i_xdrive_mileage',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 0,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
    'original_icon': None,
    'original_name': 'Mileage',
    'platform': 'bmw_connected_drive',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'mileage',
    'unique_id': 'WBA00000000DEMO03-mileage',
    'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
  })
# ---
# name: test_entity_state_attrs[sensor.m340i_xdrive_mileage-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by MyBMW',
      'device_class': 'distance',
      'friendly_name': 'M340i xDrive Mileage',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.m340i_xdrive_mileage',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '1121',
  })
# ---
# name: test_entity_state_attrs[sensor.m340i_xdrive_remaining_fuel-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.m340i_xdrive_remaining_fuel',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 0,
      }),
    }),
    'original_device_class': <SensorDeviceClass.VOLUME: 'volume'>,
    'original_icon': None,
    'original_name': 'Remaining fuel',
    'platform': 'bmw_connected_drive',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'remaining_fuel',
    'unique_id': 'WBA00000000DEMO03-remaining_fuel',
    'unit_of_measurement': <UnitOfVolume.LITERS: 'L'>,
  })
# ---
# name: test_entity_state_attrs[sensor.m340i_xdrive_remaining_fuel-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by MyBMW',
      'device_class': 'volume',
      'friendly_name': 'M340i xDrive Remaining fuel',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfVolume.LITERS: 'L'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.m340i_xdrive_remaining_fuel',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '40',
  })
# ---
# name: test_entity_state_attrs[sensor.m340i_xdrive_remaining_fuel_percent-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.m340i_xdrive_remaining_fuel_percent',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 0,
      }),
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Remaining fuel percent',
    'platform': 'bmw_connected_drive',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'remaining_fuel_percent',
    'unique_id': 'WBA00000000DEMO03-remaining_fuel_percent',
    'unit_of_measurement': '%',
  })
# ---
# name: test_entity_state_attrs[sensor.m340i_xdrive_remaining_fuel_percent-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by MyBMW',
      'friendly_name': 'M340i xDrive Remaining fuel percent',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.m340i_xdrive_remaining_fuel_percent',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '80',
  })
# ---
# name: test_entity_state_attrs[sensor.m340i_xdrive_remaining_range_fuel-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.m340i_xdrive_remaining_range_fuel',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 0,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
    'original_icon': None,
    'original_name': 'Remaining range fuel',
    'platform': 'bmw_connected_drive',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'remaining_range_fuel',
    'unique_id': 'WBA00000000DEMO03-remaining_range_fuel',
    'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
  })
# ---
# name: test_entity_state_attrs[sensor.m340i_xdrive_remaining_range_fuel-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by MyBMW',
      'device_class': 'distance',
      'friendly_name': 'M340i xDrive Remaining range fuel',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.m340i_xdrive_remaining_range_fuel',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '629',
  })
# ---
# name: test_entity_state_attrs[sensor.m340i_xdrive_remaining_range_total-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.m340i_xdrive_remaining_range_total',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 0,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
    'original_icon': None,
    'original_name': 'Remaining range total',
    'platform': 'bmw_connected_drive',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'remaining_range_total',
    'unique_id': 'WBA00000000DEMO03-remaining_range_total',
    'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
  })
# ---
# name: test_entity_state_attrs[sensor.m340i_xdrive_remaining_range_total-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by MyBMW',
      'device_class': 'distance',
      'friendly_name': 'M340i xDrive Remaining range total',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.m340i_xdrive_remaining_range_total',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '629',
  })
# ---
