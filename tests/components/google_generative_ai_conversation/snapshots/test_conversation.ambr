# serializer version: 1
# name: test_chat_history[models/gemini-1.0-pro-False]
  list([
    tuple(
      '',
      tuple(
      ),
      dict({
        'generation_config': dict({
          'max_output_tokens': 150,
          'temperature': 1.0,
          'top_k': 64,
          'top_p': 0.95,
        }),
        'model_name': 'models/gemini-1.0-pro',
        'safety_settings': dict({
          'DANGEROUS': 'BLOCK_MEDIUM_AND_ABOVE',
          'HARASSMENT': 'BLOCK_MEDIUM_AND_ABOVE',
          'HATE': 'BLOCK_MEDIUM_AND_ABOVE',
          'SEXUAL': 'BLOCK_MEDIUM_AND_ABOVE',
        }),
        'system_instruction': None,
        'tools': None,
      }),
    ),
    tuple(
      '().start_chat',
      tuple(
      ),
      dict({
        'history': list([
          dict({
            'parts': '''
              Current time is 05:00:00. Today's date is 2024-05-24.
              You are a voice assistant for Home Assistant.
              Answer questions about the world truthfully.
              Answer in plain text. Keep it simple and to the point.
              Only if the user wants to control a device, tell them to edit the AI configuration and allow access to Home Assistant.
            ''',
            'role': 'user',
          }),
          dict({
            'parts': 'Ok',
            'role': 'model',
          }),
        ]),
      }),
    ),
    tuple(
      '().start_chat().send_message_async',
      tuple(
        '1st user request',
      ),
      dict({
      }),
    ),
    tuple(
      '',
      tuple(
      ),
      dict({
        'generation_config': dict({
          'max_output_tokens': 150,
          'temperature': 1.0,
          'top_k': 64,
          'top_p': 0.95,
        }),
        'model_name': 'models/gemini-1.0-pro',
        'safety_settings': dict({
          'DANGEROUS': 'BLOCK_MEDIUM_AND_ABOVE',
          'HARASSMENT': 'BLOCK_MEDIUM_AND_ABOVE',
          'HATE': 'BLOCK_MEDIUM_AND_ABOVE',
          'SEXUAL': 'BLOCK_MEDIUM_AND_ABOVE',
        }),
        'system_instruction': None,
        'tools': None,
      }),
    ),
    tuple(
      '().start_chat',
      tuple(
      ),
      dict({
        'history': list([
          dict({
            'parts': '''
              Current time is 05:00:00. Today's date is 2024-05-24.
              You are a voice assistant for Home Assistant.
              Answer questions about the world truthfully.
              Answer in plain text. Keep it simple and to the point.
              Only if the user wants to control a device, tell them to edit the AI configuration and allow access to Home Assistant.
            ''',
            'role': 'user',
          }),
          dict({
            'parts': 'Ok',
            'role': 'model',
          }),
          dict({
            'parts': '1st user request',
            'role': 'user',
          }),
          dict({
            'parts': '1st model response',
            'role': 'model',
          }),
        ]),
      }),
    ),
    tuple(
      '().start_chat().send_message_async',
      tuple(
        '2nd user request',
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_chat_history[models/gemini-1.5-pro-True]
  list([
    tuple(
      '',
      tuple(
      ),
      dict({
        'generation_config': dict({
          'max_output_tokens': 150,
          'temperature': 1.0,
          'top_k': 64,
          'top_p': 0.95,
        }),
        'model_name': 'models/gemini-1.5-pro',
        'safety_settings': dict({
          'DANGEROUS': 'BLOCK_MEDIUM_AND_ABOVE',
          'HARASSMENT': 'BLOCK_MEDIUM_AND_ABOVE',
          'HATE': 'BLOCK_MEDIUM_AND_ABOVE',
          'SEXUAL': 'BLOCK_MEDIUM_AND_ABOVE',
        }),
        'system_instruction': '''
          Current time is 05:00:00. Today's date is 2024-05-24.
          You are a voice assistant for Home Assistant.
          Answer questions about the world truthfully.
          Answer in plain text. Keep it simple and to the point.
          Only if the user wants to control a device, tell them to edit the AI configuration and allow access to Home Assistant.
        ''',
        'tools': None,
      }),
    ),
    tuple(
      '().start_chat',
      tuple(
      ),
      dict({
        'history': list([
        ]),
      }),
    ),
    tuple(
      '().start_chat().send_message_async',
      tuple(
        '1st user request',
      ),
      dict({
      }),
    ),
    tuple(
      '',
      tuple(
      ),
      dict({
        'generation_config': dict({
          'max_output_tokens': 150,
          'temperature': 1.0,
          'top_k': 64,
          'top_p': 0.95,
        }),
        'model_name': 'models/gemini-1.5-pro',
        'safety_settings': dict({
          'DANGEROUS': 'BLOCK_MEDIUM_AND_ABOVE',
          'HARASSMENT': 'BLOCK_MEDIUM_AND_ABOVE',
          'HATE': 'BLOCK_MEDIUM_AND_ABOVE',
          'SEXUAL': 'BLOCK_MEDIUM_AND_ABOVE',
        }),
        'system_instruction': '''
          Current time is 05:00:00. Today's date is 2024-05-24.
          You are a voice assistant for Home Assistant.
          Answer questions about the world truthfully.
          Answer in plain text. Keep it simple and to the point.
          Only if the user wants to control a device, tell them to edit the AI configuration and allow access to Home Assistant.
        ''',
        'tools': None,
      }),
    ),
    tuple(
      '().start_chat',
      tuple(
      ),
      dict({
        'history': list([
          dict({
            'parts': '1st user request',
            'role': 'user',
          }),
          dict({
            'parts': '1st model response',
            'role': 'model',
          }),
        ]),
      }),
    ),
    tuple(
      '().start_chat().send_message_async',
      tuple(
        '2nd user request',
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_default_prompt[config_entry_options0-None]
  list([
    tuple(
      '',
      tuple(
      ),
      dict({
        'generation_config': dict({
          'max_output_tokens': 150,
          'temperature': 1.0,
          'top_k': 64,
          'top_p': 0.95,
        }),
        'model_name': 'models/gemini-1.5-flash-latest',
        'safety_settings': dict({
          'DANGEROUS': 'BLOCK_MEDIUM_AND_ABOVE',
          'HARASSMENT': 'BLOCK_MEDIUM_AND_ABOVE',
          'HATE': 'BLOCK_MEDIUM_AND_ABOVE',
          'SEXUAL': 'BLOCK_MEDIUM_AND_ABOVE',
        }),
        'system_instruction': '''
          Current time is 05:00:00. Today's date is 2024-05-24.
          You are a voice assistant for Home Assistant.
          Answer questions about the world truthfully.
          Answer in plain text. Keep it simple and to the point.
          <no_api_prompt>
        ''',
        'tools': None,
      }),
    ),
    tuple(
      '().start_chat',
      tuple(
      ),
      dict({
        'history': list([
        ]),
      }),
    ),
    tuple(
      '().start_chat().send_message_async',
      tuple(
        'hello',
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_default_prompt[config_entry_options0-conversation.google_generative_ai_conversation]
  list([
    tuple(
      '',
      tuple(
      ),
      dict({
        'generation_config': dict({
          'max_output_tokens': 150,
          'temperature': 1.0,
          'top_k': 64,
          'top_p': 0.95,
        }),
        'model_name': 'models/gemini-1.5-flash-latest',
        'safety_settings': dict({
          'DANGEROUS': 'BLOCK_MEDIUM_AND_ABOVE',
          'HARASSMENT': 'BLOCK_MEDIUM_AND_ABOVE',
          'HATE': 'BLOCK_MEDIUM_AND_ABOVE',
          'SEXUAL': 'BLOCK_MEDIUM_AND_ABOVE',
        }),
        'system_instruction': '''
          Current time is 05:00:00. Today's date is 2024-05-24.
          You are a voice assistant for Home Assistant.
          Answer questions about the world truthfully.
          Answer in plain text. Keep it simple and to the point.
          <no_api_prompt>
        ''',
        'tools': None,
      }),
    ),
    tuple(
      '().start_chat',
      tuple(
      ),
      dict({
        'history': list([
        ]),
      }),
    ),
    tuple(
      '().start_chat().send_message_async',
      tuple(
        'hello',
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_default_prompt[config_entry_options1-None]
  list([
    tuple(
      '',
      tuple(
      ),
      dict({
        'generation_config': dict({
          'max_output_tokens': 150,
          'temperature': 1.0,
          'top_k': 64,
          'top_p': 0.95,
        }),
        'model_name': 'models/gemini-1.5-flash-latest',
        'safety_settings': dict({
          'DANGEROUS': 'BLOCK_MEDIUM_AND_ABOVE',
          'HARASSMENT': 'BLOCK_MEDIUM_AND_ABOVE',
          'HATE': 'BLOCK_MEDIUM_AND_ABOVE',
          'SEXUAL': 'BLOCK_MEDIUM_AND_ABOVE',
        }),
        'system_instruction': '''
          Current time is 05:00:00. Today's date is 2024-05-24.
          You are a voice assistant for Home Assistant.
          Answer questions about the world truthfully.
          Answer in plain text. Keep it simple and to the point.
          <api_prompt>
        ''',
        'tools': None,
      }),
    ),
    tuple(
      '().start_chat',
      tuple(
      ),
      dict({
        'history': list([
        ]),
      }),
    ),
    tuple(
      '().start_chat().send_message_async',
      tuple(
        'hello',
      ),
      dict({
      }),
    ),
  ])
# ---
# name: test_default_prompt[config_entry_options1-conversation.google_generative_ai_conversation]
  list([
    tuple(
      '',
      tuple(
      ),
      dict({
        'generation_config': dict({
          'max_output_tokens': 150,
          'temperature': 1.0,
          'top_k': 64,
          'top_p': 0.95,
        }),
        'model_name': 'models/gemini-1.5-flash-latest',
        'safety_settings': dict({
          'DANGEROUS': 'BLOCK_MEDIUM_AND_ABOVE',
          'HARASSMENT': 'BLOCK_MEDIUM_AND_ABOVE',
          'HATE': 'BLOCK_MEDIUM_AND_ABOVE',
          'SEXUAL': 'BLOCK_MEDIUM_AND_ABOVE',
        }),
        'system_instruction': '''
          Current time is 05:00:00. Today's date is 2024-05-24.
          You are a voice assistant for Home Assistant.
          Answer questions about the world truthfully.
          Answer in plain text. Keep it simple and to the point.
          <api_prompt>
        ''',
        'tools': None,
      }),
    ),
    tuple(
      '().start_chat',
      tuple(
      ),
      dict({
        'history': list([
        ]),
      }),
    ),
    tuple(
      '().start_chat().send_message_async',
      tuple(
        'hello',
      ),
      dict({
      }),
    ),
  ])
# ---
